{
  "swagger": "2.0",
  "info": {
    "description": "Aplicação API Rest para gerenciamento de dados da Clínica Pomarola",
    "title": "API PomaLabs",
    "contact": {
      "email": "fdutra.c@gmail.com"
    }
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "schemes": [
    "http"
  ],
  "paths": {
    "/usuario": {
      "post": {
        "tags": [
          "usuario"
        ],
        "summary": "Adiciona um novo usuário",
        "description": "Cadastre um novo usuário para lhe liberar permissões de cadastros, consultas e alterações",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Dados do usuário a ser cadastrado",
            "schema": {
              "type": "object",
              "required": ["name", "login", "password"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "login": {
                  "type": "string",
                  "minimum": "6",
                  "maxiumum": "20"
                },
                "password": {
                  "type": "string",
                  "minimum": "6"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição realizada com sucesso"
          },
          "400": {
            "description": "Erro na requisição"
          }
        }
      },
      "get": {
        "tags": [
          "usuario"
        ],
        "summary": "Lista todos os usuários cadastrados",
        "operationId": "listUser",
        "description": "Faz uma lista que contém todos os usuários que já foram cadastrados no sistema",
        "consumes":[
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Requisição realizada com sucesso"
          },
          "400": {
            "description": "Erro na requisição"
          }
        }
      }
    },
    "/usuario/{id}": {
      "put": {
        "name": "user",
        "tags": [
          "usuario"
        ],
        "summary": "Atualiza os dados do usuário",
        "description": "Atualiza os dados de um usuário específico selecionado pelo ID",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Id do usuário a ser alterado",
            "required": true
          },
          {
            "in": "body",
            "name": "user",
            "description": "Dados do usuário a ser alterado",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "login": {
                  "type": "string",
                  "minimum": "6",
                  "maxiumum": "20"
                },
                "password": {
                  "type": "string",
                  "minimum": "6"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "ID Invalido!"
          },
          "404": {
            "description": "Usuário não encontrado"
          },
          "405": {
            "description": "Erro no servidor"
          }
        }
      },
      "get": {
        "name": "usuário",
        "tags": [
          "usuario"
        ],
        "summary": "Retorna os dados de um usuário cadastrado",
        "description": "Retorna os dados de um cliente específico selecionado pelo ID",
        "operationId": "showUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Id do usuário a ser exibido",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "ID inválido"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "name": "user",
        "tags": [
          "usuario"
        ],
        "summary": "Delete do sistema um usuário",
        "description": "Deleta um usuário do sistema que foi selecionado pelo ID",
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "path",
            "description": "Id do usuário a ser deletado",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição realizada com sucesso"
          },
          "400": {
            "description": "ID inválido"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/cliente": {
      "post": {
        "tags": [
          "cliente"
        ],
        "summary": "Adiciona um novo cliente",
        "description": "Cadastre um novo cliente para que possa ser possível marcar consultas e exames para o mesmo",
        "operationId": "addClient",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Dados do usuário a ser cadastrado",
            "schema": {
              "type": "object",
              "required": ["name", "cpf", "phone", "mail"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "cpf": {
                  "type": "string",
                  "maxiumum": "14"
                },
                "phone": {
                  "type": "string",
                  "maxiumum": "14"
                },
                "cellphone": {
                  "type": "string",
                  "maxiumum": "14"
                },
                "mail": {
                  "type": "string"
                },
                "bloodtype": {
                  "type": "string",
                  "enum": ["A+", "A-", "B+", "B-", "O+", "O-", "AB+", "AB-"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cadastro realizado com sucesso!"
          },          
          "400": {
            "description": "Erro ao efetuar o cadastro"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/cliente/": {
      "get": {
        "tags": [
          "cliente"
        ],
        "summary": "Lista de clientes",
        "description": "Lista todos os clientes que foram cadastrados no sistema anteriormente",
        "operationId": "listClient",
        "consumes": [
          "application/json"
        ],
        "parameters": [

        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/cliente/{id}": {
      "put": {
        "name": "cliente",
        "tags": [
          "cliente"
        ],
        "summary": "Atualiza os dados do cliente",
        "description": "Atualiza os dados de um cliente específico selecionado pelo ID",
        "operationId": "updateClient",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Id do cliente a ser alterado",
            "required": true
          },
          {
            "in": "body",
            "name": "user",
            "description": "Dados do cliente a ser alterado",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "login": {
                  "type": "string",
                  "minimum": "6",
                  "maxiumum": "20"
                },
                "password": {
                  "type": "string",
                  "minimum": "6"
                }
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "ID Invalido!"
          },
          "404": {
            "description": "Cliente não encontrado"
          },
          "405": {
            "description": "Erro no servidor"
          }
        }
      },
      "get": {
        "name": "cliente",
        "tags": [
          "cliente"
        ],
        "summary": "Retorna os dados de um cliente cadastrado",
        "description": "Retorna os dados de um cliente específico selecionado pelo ID",
        "operationId": "showClient",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Id do cliente a ser exibido",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "ID inválido"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "name": "cliente",
        "tags": [
          "cliente"
        ],
        "summary": "Deleta do sistema um cliente",
        "description": "Deleta um cliente do sistema que foi selecionado pelo ID",
        "operationId": "deleteClient",
        "parameters": [
          {
            "in": "path",
            "description": "Id do cliente a ser deletado",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Requisição realizada com sucesso"
          },
          "400": {
            "description": "ID inválido"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http:/userstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}